<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Checks whether current page belongs to backoffice.
 */
function pendeedus_is_backoffice() {
  static $response;
  if (!isset($response)) {
    $response = _pendeedus_is_backoffice();
  }
  return $response;
}

/**
 * Checks whether current page belongs to backoffice.
 */
function _pendeedus_is_backoffice() {
  if (\Drupal::currentUser()->isAnonymous()) {
    return FALSE;
  }

  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.node.canonical') {
    if ($route_match->getParameter('node')->bundle() == 'page') {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function pendeedus_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if (!pendeedus_is_backoffice()) {
    array_unshift($suggestions, 'page__anonymous');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pendeedus_preprocess_html(&$variables) {
  if (pendeedus_is_backoffice()) {
    $variables["attributes"]["class"][] = 'backoffice';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pendeedus_preprocess_region(&$variables) {
  if ($variables['region'] == 'content') {
    if (pendeedus_is_backoffice()) {
      // Remove class "row".
      unset($variables["attributes"]["class"][0]);
    }
  }
}

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function pendeedus_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function pendeedus_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['login'] = [
    '#type' => 'inline_template',
    '#template' => '<p>' . t('Already have an account? <a href="{{ url }}">Log in</a>.') . '</p>',
    '#context' => [
      'url' => Url::fromRoute('user.login')->toString(),
    ],
    '#weight' => 100,
  ];

  // Remove description.
  $form["account"]["mail"]["#description"] = '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pendeedus_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['actions']['password'] = [
    '#type' => 'inline_template',
    '#template' => '<p>' . t('<a href="{{ url }}">Forgot password?</a>') . '</p>',
    '#context' => [
      'url' => Url::fromRoute('user.pass')->toString(),
    ],
    '#weight' => -100,
  ];

  $url = \Drupal::config('multiple_registration.create_registration_page_form_config')
    ->get('multiple_registration_url_vendor');
  $form['register'] = [
    '#type' => 'inline_template',
    '#template' => '<p>' . t('New user? <a href="{{ url }}">Click here to register</a>.') . '</p>',
    '#context' => [
      'url' => $url,
    ],
    '#weight' => 100,
  ];
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function pendeedus_form_user_pass_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['login'] = [
    '#type' => 'inline_template',
    '#template' => '<p>' . t('<a href="{{ url }}">Back to log in page</a>') . '</p>',
    '#context' => [
      'url' => Url::fromRoute('user.login')->toString(),
    ],
    '#weight' => 100,
  ];
}
