<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\commerce_order\Adjustment;
use Drupal\commerce_price\Price;
use Drupal\pd_request\DocRequestStateManager;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_preprocess_HOOK().
 */
function pd_request_preprocess_page(&$variables) {
  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if (!$logged_in) {
    # Add libraries for anonymous
    $variables['#attached']['library'][] = 'core/drupal.ajax';
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function pd_request_entity_type_build(array &$entity_types) {
  $default_handler_class = $entity_types['doc_request']->getHandlerClasses()['form']['default'];
  $entity_types['doc_request']->setFormClass('process', $default_handler_class);
  $entity_types['doc_request']->setClass('Drupal\pd_request\Entity\DocRequest');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pd_request_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add needed options.
  if (isset($form["layout"]["sidebar_second"]["bootstrap_barrio_sidebar_second_width"])) {
    $form["layout"]["sidebar_second"]["bootstrap_barrio_sidebar_second_width"]['#options'][5] = t('5 cols');
    $form["layout"]["sidebar_second"]["bootstrap_barrio_sidebar_second_width"]['#options'][6] = t('6 cols');
    $form["layout"]["sidebar_second"]["bootstrap_barrio_sidebar_second_width"]['#options'][7] = t('7 cols');
    $form["layout"]["sidebar_second"]["bootstrap_barrio_sidebar_second_width"]['#options'][8] = t('8 cols');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pd_request_form_doc_request_doc_request_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add custom validation handler.
  $form['#validate'][] = 'pd_request_form_doc_request_doc_request_form_validate';
  // Alter button name.
  $form["actions"]["submit"]["#value"] = t('Submit');
  $form["actions"]["submit"]["#submit"][] = 'pd_request_form_doc_request_doc_request_form_submit';
}

/**
 * Custom validation handler.
 */
function pd_request_form_doc_request_doc_request_form_validate($form, FormStateInterface $form_state) {
  $entity_type_manager = \Drupal::entityTypeManager();
  $payment_methods = $entity_type_manager->getStorage('commerce_payment_method')->loadByProperties([
    'uid' => \Drupal::currentUser()->id(),
  ]);
  $billing_profiles = $entity_type_manager->getStorage('profile')->loadByProperties([
    'type' => 'customer',
    'uid' => \Drupal::currentUser()->id(),
  ]);
  if (empty($billing_profiles) || empty($payment_methods)) {
    $form_state->setError($form['field_footer'], 'Please add at least one payment method before requesting a document.');
  }
}

/**
 * Form submit callback.
 */
function pd_request_form_doc_request_doc_request_form_submit($form, FormStateInterface $form_state) {
  $doc_request = $form_state->getFormObject()->getEntity();
  // Create order.
  $order = \Drupal::service('pd_request.request_manager')->createOrder($doc_request);
  $doc_request->setOrder($order);
  $doc_request->save();
  // Redirect.
  \Drupal::messenger()->addStatus(t('Document request has been submitted.'));
  $form_state->setRedirect('eck.entity.add', [
    'eck_entity_type' => 'doc_request',
    'eck_entity_bundle' => 'doc_request',
  ]);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function pd_request_doc_request_presave(Drupal\Core\Entity\EntityInterface $entity) {
  /** @var  \Drupal\eck\Entity\EckEntity $entity */
  // Change state if relevant.
  $manager = new DocRequestStateManager($entity);
  $manager->processUpdate();
}

function delete_old_entity_type() {
  foreach (entity_load_multiple('request') as $entity) {
    $entity->delete();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pd_request_form_doc_request_doc_request_process_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form["field_additional_fee"]['#states'] = $form["field_documents"]['#states'] = [
    'invisible' => [
      ':input[name="field_not_available[value]"]' => array('checked' => TRUE),
    ],
  ];

  /** @var \Drupal\eck\Form\Entity\EckEntityForm $callback_object */
  $callback_object = $form_state->getBuildInfo()['callback_object'];
  // Remove submit handler if completed.
  $has_document = !empty($form['field_documents']['widget'][0]['#default_value']['target_id']);
  $is_cancelled = !empty($form['field_not_available']['widget']['value']['#default_value']);
  if ($has_document || $is_cancelled) {
    //$form['actions']['submit']['#access'] = FALSE;
  }
  $form['#action'] = '/requests?doc_request=' . $callback_object->getEntity()->id();
  // Add custom validation handler.
  $form['#validate'][] = 'pd_request_form_doc_request_doc_request_process_form_validate';
  // Add custom submit handler.
  $form["actions"]["submit"]["#submit"][] = 'pd_request_form_doc_request_doc_request_process_form_submit';
}

/**
 * Custom validation handler.
 */
function pd_request_form_doc_request_doc_request_process_form_validate($form, FormStateInterface $form_state) {
  // Not allow to request more fee and add a document.
  if ($form_state->getValue('field_additional_fee')[0]['value'] && empty($form_state->getValue('field_documents')[0]['fids'])) {
    $form_state->setError($form['field_additional_fee'], 'Please upload a document before saving.');
  }
}

/**
 * Custom submit handler for doc_request_process_form.
 */
function pd_request_form_doc_request_doc_request_process_form_submit($form, FormStateInterface $form_state) {
  $doc_request = $form_state->getFormObject()->getEntity();
  // Cancel order if not available.
  if ($form_state->getValue('field_not_available')['value']) {
    $order = $doc_request->getOrder();
    $order->getState()->applyTransitionById('cancel');
    $order->save();
  }
  // Additional fee.
  else if ($fee = $form_state->getValue('field_additional_fee')[0]['value']) {
    $order = $doc_request->getOrder();
    $adjustment = new Adjustment([
      'label' => t('Additional fee'),
      'type' => 'fee',
      'amount' => new Price($fee, 'USD'),
      'locked' => TRUE,
    ]);
    $order->setAdjustments([$adjustment]);
    $order->save();
  }
  // Perform payment transaction.
  else if (!empty($form_state->getValue('field_documents')[0]['fids'])) {
    $request_manager = \Drupal::service('pd_request.request_manager');
    $amount = $request_manager->getDocRequestFee($doc_request, $form_state->getValue('field_coverage_type')[0]['target_id']);
    $order = $doc_request->getOrder();
    $order_items = $order->getItems();
    $order_item = reset($order_items);
    $order_item->setUnitPrice(new Price($amount, 'USD'), TRUE);
    $order_item->save();
    $order->recalculateTotalPrice();
    $order->save();
    $request_manager->performPayment($doc_request);
  }
  // Redirect.
  $callback_object = $form_state->getBuildInfo()['callback_object'];
  $form_state->setRedirect('view.doc_requests.page_1', [], [
    'query' => ['doc_request' => $callback_object->getEntity()->id(),
    ],
  ]);
}

/**
 * Implements hook_view_pre_build().
 */
function pd_request_views_pre_render(ViewExecutable $view) {
  // Request page.
  if ($view->id() == 'doc_requests' && $view->current_display == 'page_1') {
    // Attach requets.js
    $view->element['#attached']['library'][] = 'pd_request/requests';
    $view->element['#attached']['drupalSettings']['pd_request']['refresh_path'] = Url::fromRoute('pd_request.requests_refresh')->toString();
  }
  // Document page.
  if ($view->id() == 'user_requests' && $view->current_display == 'block_1') {
    // Attach documents.js
    $view->element['#attached']['library'][] = 'pd_request/documents';
    $view->element['#attached']['drupalSettings']['pd_request']['refresh_path'] = Url::fromRoute('pd_request.documents_refresh')->toString();
  }
}
